{"version":3,"sources":["img/img1.jpg","img/img2.jpg","img/img3.jpg","img/img4.jpg","img/img5.jpg","img/img6.jpg","img/img7.jpg","img/img8.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","ReactPlayer_default","url","playing","height","width","src","img1","img2","img3","img4","img5","img6","img7","img8","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qYCoDzBC,0LApCX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAaI,IAAI,+BAA+BC,SAAO,EAACC,OAAQ,OAAQC,MAAO,SAC7ER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,MACVV,EAAAC,EAAAC,cAAA,OAAKO,IAAKE,MACVX,EAAAC,EAAAC,cAAA,OAAKO,IAAKG,MACVZ,EAAAC,EAAAC,cAAA,OAAKO,IAAKI,OAGdb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,6EACAF,EAAAC,EAAAC,cAAA,6UAIAF,EAAAC,EAAAC,cAAA,iDAEFF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKO,IAAKK,MACVd,EAAAC,EAAAC,cAAA,OAAKO,IAAKM,MACVf,EAAAC,EAAAC,cAAA,OAAKO,IAAKO,MACVhB,EAAAC,EAAAC,cAAA,OAAKO,IAAKQ,gBA3BZC,cCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.505e4098.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img1.cdd91b50.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img2.101bca1a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img3.de8f8741.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img4.6e038d41.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img5.0f6042f7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img6.a4dafff0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img7.7f3aca36.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img8.f7281744.jpg\";","import React, { Component } from 'react';\nimport ReactPlayer from 'react-player'\nimport img1 from './img/img1.jpg';\nimport img2 from './img/img2.jpg';\nimport img3 from './img/img3.jpg';\nimport img4 from './img/img4.jpg';\nimport img5 from './img/img5.jpg';\nimport img6 from './img/img6.jpg';\nimport img7 from './img/img7.jpg';\nimport img8 from './img/img8.jpg';\nimport './App.css';\n\nclass App extends Component {\n\n\nrender() {\n    return (\n      <div className=\"App\">\n        <ReactPlayer url='https://youtu.be/L2HDpMxvo9Y' playing height={\"20px\"} width={\"20px\"} />\n          <div className=\"App-body\">\n              <div>\n                  <img src={img1} />\n                  <img src={img2} />\n                  <img src={img3} />\n                  <img src={img4} />\n              </div>\n\n              <div className=\"center\">\n                  <p>Ynglings Mathiesen, KÆMPE stort tillykke med fødselsdagen!</p>\n                  <p>Vi håber at du bliver fejret og forkælet som du fortjener og håber du får den dag du ønsker dig!\n                      Din søster elsker dig herfra og til månen 10000 gange!\n                      Vi tænkte at vi i år gerne ville give dig din gave på en anden og anderledes måde, så derfor kan du tjekke din awsome gave ud her ;)\n                  </p>\n                  <p>KÆMPE knus fra Henrik og søs.</p>\n              </div>\n                <div>\n                    <img src={img5}/>\n                    <img src={img6}/>\n                    <img src={img7}/>\n                    <img src={img8}/>\n                </div>\n          </div>\n\n\n\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}